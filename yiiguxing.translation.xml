<application>
  <component name="AppStorage">
    <histories>
      <item value="return" />
      <item value="car Garage Audit History Service" />
      <item value="car Garage" />
      <item value="constant" />
      <item value="no further information" />
      <item value="set Recipients" />
      <item value="Returns a stream consisting of the elements of this stream that match the given predicate. &lt;p&gt;This is an &lt;a href=&quot;package-summary.htmlStreamOps&quot;&gt;intermediate operation&lt;a&gt;. @param predicate a &lt;a href=&quot;package-summary.htmlNonInterference&quot;&gt;non-interfering&lt;a&gt;, &lt;a href=&quot;package-summary.htmlStatelessness&quot;&gt;stateless&lt;a&gt; predicate to apply to each element to determine if it should be included @return the new stream" />
      <item value="switch" />
      <item value="passageway id" />
      <item value="set Most Credible Location" />
      <item value="allow Credentials" />
      <item value="deprecated" />
      <item value="Abstract adapter class for the {@link AsyncHandlerInterceptor} interface, for simplified implementation of pre-onlypost-only interceptors. @author Juergen Hoeller @since 05.12.2003 @deprecated as of 5.3 in favor of implementing {@link HandlerInterceptor} andor {@link AsyncHandlerInterceptor} directly." />
      <item value="Relying upon circular references is discouraged and they are prohibited by default. Update your application to remove the dependency cycle between beans. As a last resort, it may be possible to break the cycle automatically by setting spring.main.allow-circular-references to true." />
      <item value="{&quot;ENTERPRISE_BUSINESS_CARD_OCR_STATUS&quot;: &quot;艾科瑞特，让企业业绩长青&quot;, &quot;ENTERPRISE_NAME_CH&quot;: &quot;天津双信诚工程机械租赁有限公司&quot;, &quot;ENTERPRISE_STATUS&quot;: &quot;存续&quot;, &quot;ENTERPRISE_REGISTER_ID&quot;: &quot;&quot;, &quot;ENTERPRISE_ID&quot;: &quot;91120110MA06902D08&quot;, &quot;ENTERPRISE_REGISTER_ADDRESS&quot;: &quot;天津市西青区大寺镇南里八口村津港公路与芦北路交口往南200米&quot;, &quot;ENTERPRISE_COUNTRY_ID&quot;: &quot;120111&quot;, &quot;ENTERPRISE_PROVINCE&quot;: &quot;天津市&quot;, &quot;ENTERPRISE_CITY&quot;: &quot;天津市&quot;, &quot;ENTERPRISE_DISTRICT&quot;: &quot;西青区&quot;, &quot;ENTERPRISE_BANK_ADDRESS&quot;: &quot;天津市西青区大寺镇南里八口村津港公路与芦北路交口往南200米&quot;, &quot;ENTERPRISE_TEL&quot;: &quot;&quot;, &quot;ENTERPRISE_BANK_NAME&quot;: &quot;&quot;, &quot;ENTERPRISE_BANK_COUNTRY_ID&quot;: &quot;120111&quot;, &quot;ENTERPRISE_BANK_PROVINCE&quot;: &quot;天津市&quot;, &quot;ENTERPRISE_BANK_CITY&quot;: &quot;天津市&quot;, &quot;ENTERPRISE_BANK_DISTRICT&quot;: &quot;西青区&quot;, &quot;ENTERPRISE_BANK_ID&quot;: &quot;&quot;, &quot;ENTERPRISE_OWNER&quot;: &quot;刘波&quot;, &quot;ENTERPRISE_CAPITAL&quot;: &quot;50万元&quot;, &quot;ENTERPRISE_TIME&quot;: &quot;2017年12月14日&quot;, &quot;ENTERPRISE_TYPE&quot;: &quot;有限责任公司(自然人独资)&quot;, &quot;ENTERPRISE_INDUSTRY&quot;: &quot;&quot;, &quot;ENTERPRISE_ORGANIZATION&quot;: &quot;&quot;, &quot;ENTERPRISE_USED_NAME&quot;: &quot;&quot;, &quot;ENTERPRISE_NAME_EN&quot;: &quot;&quot;, &quot;ENTERPRISE_INSURED&quot;: &quot;&quot;, &quot;ENTERPRISE_PEOPLE&quot;: &quot;&quot;, &quot;ENTERPRISE_SCOPE&quot;: &quot;&quot;, &quot;ENTERPRISE_VALID_DATE_START&quot;: &quot;2017年12月14日&quot;, &quot;ENTERPRISE_VALID_DATE_END&quot;: &quot;长期&quot;, &quot;ENTERPRISE_REGISTER_ADDRESS_CITY&quot;: &quot;天津市&quot;, &quot;ENTERPRISE_REGISTER_ADDRESS_DISTRICT&quot;: &quot;西青区&quot;, &quot;ENTERPRISE_REGISTER_ADDRESS_FORMAT_ADDRESS&quot;: &quot;天津市西青区大寺镇南里八口村津港公路芦北路&quot;, &quot;ENTERPRISE_REGISTER_ADDRESS_GPS&quot;: &quot;117.253232,39.001478&quot;, &quot;ENTERPRISE_REGISTER_ADDRESS_PROVINCE&quot;: &quot;天津市&quot;, &quot;ENTERPRISE_TAXPAYER_REGISTER_ID&quot;: &quot;91120110MA06902D08&quot;, &quot;ENTERPRISE_UNIVERSAL_CREDIT_ID_AGENCY_CODE&quot;: &quot;MA06902D-0&quot;}" />
      <item value="valid To Date" />
      <item value="Bean Post Processors" />
      <item value="eligible" />
      <item value="not eligible for auto-proxying" />
      <item value="recognize Business License" />
      <item value="assert As String" />
      <item value="Tea Exception" />
      <item value="Unrecognized" />
      <item value="Duty" />
      <item value="CLIENT ERROR" />
      <item value="REDIRECTION" />
      <item value="Series" />
      <item value="AUTHENTICATE HEADER" />
      <item value="authorization" />
      <item value="challenge" />
      <item value="Builds the challenge for authorization by setting a HTTP &lt;code&gt;401&lt;code&gt; (Unauthorized) status as well as the response's {@link AUTHENTICATE_HEADER AUTHENTICATE_HEADER}. &lt;p&gt; The header value constructed is equal to: &lt;p&gt; &lt;code&gt;{@link getAuthcScheme() getAuthcScheme()} + &quot; realm=\&quot;&quot; + {@link getApplicationName() getApplicationName()} + &quot;\&quot;&quot;;&lt;code&gt; @param request incoming ServletRequest, ignored by this implementation @param response outgoing ServletResponse @return false - this sends the challenge to be sent back" />
      <item value="send Challenge" />
      <item value="Lifecycle Bean Post Processor" />
      <item value="is Access Allowed" />
      <item value="Unauthorized Exception" />
      <item value="捕捉Unauthorized Exception" />
      <item value="delivery Complete" />
      <item value="truncated" />
      <item value="invalid comparison: java.util.Date and java.lang.String" />
      <item value="comparison" />
      <item value="connection Lost" />
      <item value="Sets the quality of service for this message. &lt;ul&gt; &lt;li&gt;Quality of Service 0 - indicates that a message should be delivered at most once (zero or one times). The message will not be persisted to disk, and will not be acknowledged across the network. This QoS is the fastest, but should only be used for messages which are not valuable - note that if the server cannot process the message (for example, there is an authorization problem), then an {@link MqttCallbackdeliveryComplete(IMqttDeliveryToken)}. Also known as &quot;fire and forget&quot;.&lt;li&gt; &lt;li&gt;Quality of Service 1 - indicates that a message should be delivered at least once (one or more times). The message can only be delivered safely if it can be persisted, so the application must supply a means of persistence using &lt;code&gt;MqttConnectOptions&lt;code&gt;. If a persistence mechanism is not specified, the message will not be delivered in the event of a client failure. The message will be acknowledged across the network. This is the default QoS.&lt;li&gt; &lt;li&gt;Quality of Service 2 - indicates that a message should be delivered once. The message will be persisted to disk, and will be subject to a two-phase acknowledgement across the network. The message can only be delivered safely if it can be persisted, so the application must supply a means of persistence using &lt;code&gt;MqttConnectOptions&lt;code&gt;. If a persistence mechanism is not specified, the message will not be delivered in the event of a client failure.&lt;li&gt; &lt;ul&gt; If persistence is not configured, QoS 1 and 2 messages will still be delivered in the event of a network or server problem as the client will hold state in memory. If the MQTT client is shutdown or fails and persistence is not configured then delivery of QoS 1 and 2 messages can not be maintained as client-side state will be lost. @param qos the &quot;quality of service&quot; to use. Set to 0, 1, 2. @throws IllegalArgumentException if value of QoS is not 0, 1 or 2. @throws IllegalStateException if this message cannot be edited" />
      <item value="banner" />
      <item value="special" />
      <item value="displacement" />
      <item value="the number of threads in the pool" />
      <item value="millis" />
      <item value="truncate" />
      <item value="Feature that determines whether Date (and datetime) values (and Date-based things like {@link java.util.Calendar}s) are to be serialized as numeric timestamps (true; the default), or as something else (usually textual representation). If textual representation is used, the actual format is one returned by a call to {@link com.fasterxml.jackson.databind.SerializationConfiggetDateFormat}: the default setting being {@link com.fasterxml.jackson.databind.util.StdDateFormat}, which corresponds to format String of &quot;yyyy-MM-dd'T'HH:mm:ss.SSSZ&quot; (see {@link java.text.DateFormat} for details of format Strings). &lt;p&gt; Note: whether this feature affects handling of other date-related types depend on handlers of those types, although ideally they should use this feature &lt;p&gt; Note: whether {@link java.util.Map} keys are serialized as Strings or not is controlled using {@link WRITE_DATE_KEYS_AS_TIMESTAMPS}. &lt;p&gt; Feature is enabled by default, so that datetime are by default serialized as timestamps." />
      <item value="duration" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="261" />
        <entry key="ENGLISH" value="262" />
        <entry key="IRISH" value="1" />
        <entry key="LATIN" value="2" />
        <entry key="SLOVENIAN" value="1" />
        <entry key="SPANISH" value="3" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1663737607057" />
  </component>
  <component name="Translation.Cache">
    <option name="lastTrimTime" value="1689840347994" />
  </component>
  <component name="Translation.Settings">
    <option name="translator" value="MICROSOFT" />
  </component>
  <component name="Translation.States">
    <histories>
      <item value="protocol" />
      <item value="initials" />
      <item value="additivity" />
      <item value="Returns this Subject's application-wide uniquely identifying principal, or {@code null} if this Subject is anonymous because it doesn't yet have any associated account data (for example, if they haven't logged in). &lt;p&gt; The term &lt;em&gt;principal&lt;em&gt; is just a fancy security term for any identifying attribute(s) of an application user, such as a username, or user id, or public key, or anything else you might use in your application to identify a user. &lt;h4&gt;Uniqueness&lt;h4&gt; Although given names and family names (firstlast) are technically considered principals as well, Shiro expects the object returned from this method to be an identifying attribute unique across your entire application. &lt;p&gt; This implies that things like given names and family names are usually poor candidates as return values since they are rarely guaranteed to be unique; Things often used for this value: &lt;ul&gt; &lt;li&gt;A {@code long} RDBMS surrogate primary key&lt;li&gt; &lt;li&gt;An application-unique username&lt;li&gt; &lt;li&gt;A {@link java.util.UUID UUID}&lt;li&gt; &lt;li&gt;An LDAP Unique ID&lt;li&gt; &lt;ul&gt; or any other similar suitable unique mechanism valuable to your application. &lt;p&gt; Most implementations will simply return &lt;code&gt;{@link getPrincipals()}.{@link org.apache.shiro.subject.PrincipalCollectiongetPrimaryPrincipal() getPrimaryPrincipal()}&lt;code&gt; @return this Subject's application-specific unique identity. @see org.apache.shiro.subject.PrincipalCollectiongetPrimaryPrincipal()" />
      <item value="several" />
      <item value="get To Day" />
      <item value="data Base Time Expression" />
      <item value="Announcement Service" />
      <item value="Annotation retention policy. The constants of this enumerated class describe the various policies for retaining annotations. They are used in conjunction with the Retention meta-annotation interface to specify how long annotations are to be retained." />
      <item value="Indicates how long annotations with the annotated interface are to be retained. If no Retention annotation is present on an annotation interface declaration, the retention policy defaults to RetentionPolicy.CLASS. A Retention meta-annotation has effect only if the meta-annotated interface is used directly for annotation. It has no effect if the meta-annotated interface is used as a member interface in another annotation interface." />
      <item value="If the annotation @Documented is present on the declaration of an annotation interface A, then any @A annotation on an element is considered part of the element's public contract. In more detail, when an annotation interface A is annotated with Documented, the presence and value of A annotations are a part of the public contract of the elements A annotates. Conversely, if an annotation interface B is not annotated with Documented, the presence and value of B annotations are not part of the public contract of the elements B annotates. Concretely, if an annotation interface is annotated with Documented, by default a tool like javadoc will display annotations of that interface in its output while annotations of annotation interfaces without Documented will not be displayed." />
      <item value="CLOUDFRONT REGIONAL EDGE IP LIST" />
      <item value="CLOUDFRONT GLOBAL IP LIST" />
      <item value="Specify a repeat interval in minutes - which will then be multiplied by 60 1000 to produce milliseconds. Params: intervalInMinutes – the number of seconds at which the trigger should repeat. Returns: the updated SimpleScheduleBuilder See Also: SimpleTrigger.getRepeatInterval(), withRepeatCount(int)" />
      <item value="Determines if the class or interface represented by this Class object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified Class parameter. It returns true if so; otherwise it returns false. If this Class object represents a primitive type, this method returns true if the specified Class parameter is exactly this Class object; otherwise it returns false. Specifically, this method tests whether the type represented by the specified Class parameter can be converted to the type represented by this Class object via an identity conversion or via a widening reference conversion. See The Java Language Specification, sections @jls 5.1.1 and @jls 5.1.4, for details. Params: cls – the Class object to be checked Returns: the boolean value indicating whether objects of the type cls can be assigned to objects of this class Throws: NullPointerException – if the specified Class parameter is null." />
      <item value="Determines if the class or interface represented by this Class object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified Class parameter. It returns true if so; otherwise it returns false. If this Class object represents a primitive type, this method returns true if the specified Class parameter is exactly this Class object; otherwise it returns false. Specifically, this method tests whether the type represented by the specified Class parameter can be converted to the type represented by this Class object via an identity conversion or via a widening reference conversion. See The Java Language Specification, sections @jls 5.1.1 and @jls 5.1.4, for details. Params: cls – the Class object to be checked Returns: the boolean value indicating whether objects of the type cls can be assigned to objects of this class Throws: NullPointerException – if the specified Class parameter is null. Since: 1.1" />
      <item value="Buffered Writer" />
      <item value="complex Type" />
      <item value="sequence" />
      <item value="Write Slash As Special" />
      <item value="Disable Circular Reference Detect" />
      <item value="Pretty Format" />
      <item value="get Rent Out Date" />
      <item value="get Tenancy End Time" />
      <item value="normal Car" />
      <item value="abnormal Car" />
      <item value="rent" />
      <item value="Gloable" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="27" />
        <entry key="ENGLISH" value="28" />
      </map>
    </option>
  </component>
</application>